// Backend: server.js

const express = require("express");
const http = require("http");
const mongoose = require("mongoose");
const { Server } = require("socket.io");
const cors = require("cors");

const app = express();
const server = http.createServer(app);
const io = new Server(server, {
    cors: {
        origin: "*",
    },
});

// Middleware
app.use(cors());
app.use(express.json());

// MongoDB Connection
mongoose.connect("your_mongo_db_connection_string", {
    useNewUrlParser: true,
    useUnifiedTopology: true,
})
    .then(() => console.log("Connected to MongoDB"))
    .catch((err) => console.error("MongoDB connection error:", err));

// Socket.IO Logic
io.on("connection", (socket) => {
    console.log("User connected:", socket.id);

    socket.on("send_message", (data) => {
        io.emit("receive_message", data);
    });

    socket.on("disconnect", () => {
        console.log("User disconnected:", socket.id);
    });
});

// Start Server
const PORT = process.env.PORT || 5000;
server.listen(PORT, () => console.log(`Server running on port ${PORT}`));

// Frontend: Chat Component

import React, { useState, useEffect } from "react";
import { io } from "socket.io-client";

const socket = io("http://localhost:5000");

const Chat = () => {
    const [message, setMessage] = useState("");
    const [chat, setChat] = useState([]);

    const sendMessage = () => {
        if (message.trim()) {
            socket.emit("send_message", { message });
            setMessage("");
        }
    };

    useEffect(() => {
        socket.on("receive_message", (data) => {
            setChat((prev) => [...prev, data]);
        });

        return () => socket.off("receive_message");
    }, []);

    return (
        <div>
            <div className="chat-box" style={{ border: "1px solid #ccc", height: "300px", overflowY: "scroll", padding: "10px" }}>
                {chat.map((msg, idx) => (
                    <p key={idx}>{msg.message}</p>
                ))}
            </div>
            <input
                type="text"
                value={message}
                onChange={(e) => setMessage(e.target.value)}
                style={{ width: "80%", padding: "5px" }}
            />
            <button onClick={sendMessage} style={{ padding: "5px 10px", marginLeft: "10px" }}>
                Send
            </button>
        </div>
    );
};

export default Chat;
